-- SELECT * FROM bank_project.bank_account;
CREATE DATABASE IF NOT EXISTS bank_project;
USE bank_project;

-- Create a table for bank branches
CREATE TABLE IF NOT EXISTS branches (
    branch_id INT AUTO_INCREMENT PRIMARY KEY,
    branch_name VARCHAR(100),
    branch_address VARCHAR(255),
    branch_city VARCHAR(100),
    branch_state VARCHAR(100),
    branch_zip VARCHAR(10)
);

-- Create a table for customers
CREATE TABLE IF NOT EXISTS customers (
    customer_id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    date_of_birth DATE,
    email VARCHAR(100),
    phone_number VARCHAR(15),
    address VARCHAR(255),
    city VARCHAR(100),
    state VARCHAR(100),
    zip VARCHAR(10),
    passwd VARCHAR(255)
);

-- Create a table for accounts
CREATE TABLE IF NOT EXISTS accounts (
    account_number INT AUTO_INCREMENT PRIMARY KEY,
    customer_id INT,
    branch_id INT,
    account_type ENUM('Savings', 'Checking', 'Business'),
    balance DECIMAL(10, 2),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),
    FOREIGN KEY (branch_id) REFERENCES branches(branch_id)
);

-- Create a table for transactions
CREATE TABLE IF NOT EXISTS transactions (
    transaction_id INT AUTO_INCREMENT PRIMARY KEY,
    account_number INT,
    transaction_type ENUM('Deposit', 'Withdrawal', 'Transfer'),
    amount DECIMAL(10, 2),
    transaction_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (account_number) REFERENCES accounts(account_number)
);

-- Create a table for employees (optional, if you want to manage bank staff)
CREATE TABLE IF NOT EXISTS employees (
    employee_id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    branch_id INT,
    job_title VARCHAR(100),
    salary DECIMAL(10, 2),
    FOREIGN KEY (branch_id) REFERENCES branches(branch_id)
);

-- Create a table for account ownership (if you want to allow joint accounts)
CREATE TABLE IF NOT EXISTS account_ownership (
    ownership_id INT AUTO_INCREMENT PRIMARY KEY,
    account_number INT,
    customer_id INT,
    FOREIGN KEY (account_number) REFERENCES accounts(account_number),
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);
